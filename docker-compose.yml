# Docker Compose for Defensive Toolkit - Production Stack
# 100% Open Source Blue Team Security Platform
# Version: 1.3.0

version: '3.9'

services:
  # ============================================================================
  # Defensive Toolkit API
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: defensive-toolkit-api
    restart: unless-stopped
    environment:
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      # Security (IMPORTANT: Change in production!)
      - SECRET_KEY=${SECRET_KEY:-CHANGE_THIS_IN_PRODUCTION}
      - VALID_API_KEYS=${VALID_API_KEYS:-}
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_DEFAULT=100/minute
      # Wazuh Integration
      - WAZUH_PASSWORD=${WAZUH_PASSWORD:-}
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./detection-rules:/app/detection-rules:ro
    networks:
      - defensive-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      prometheus:
        condition: service_healthy

  # ============================================================================
  # Nginx Reverse Proxy
  # ============================================================================
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: defensive-toolkit-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - defensive-net
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Prometheus - Metrics Collection
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: defensive-toolkit-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    networks:
      - defensive-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Grafana - Metrics Visualization
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: defensive-toolkit-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeme}
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    networks:
      - defensive-net
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Wazuh Manager (Optional - Uncomment to enable)
  # ============================================================================
  # wazuh:
  #   image: wazuh/wazuh-manager:latest
  #   container_name: defensive-toolkit-wazuh
  #   restart: unless-stopped
  #   environment:
  #     - WAZUH_MANAGER_ADMIN_PASSWORD=${WAZUH_PASSWORD:-SecurePassword123}
  #   ports:
  #     - "1514:1514"    # Agent connection
  #     - "1515:1515"    # Agent enrollment
  #     - "55000:55000"  # API
  #   volumes:
  #     - wazuh-data:/var/ossec/data
  #     - wazuh-logs:/var/ossec/logs
  #     - wazuh-etc:/var/ossec/etc
  #   networks:
  #     - defensive-net
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "https://localhost:55000/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # ============================================================================
  # OpenSearch (Optional - Uncomment to enable)
  # ============================================================================
  # opensearch:
  #   image: opensearchproject/opensearch:latest
  #   container_name: defensive-toolkit-opensearch
  #   restart: unless-stopped
  #   environment:
  #     - cluster.name=defensive-toolkit
  #     - node.name=opensearch-node1
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "DISABLE_SECURITY_PLUGIN=true"  # Enable security in production!
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - "9200:9200"
  #     - "9600:9600"
  #   volumes:
  #     - opensearch-data:/usr/share/opensearch/data
  #   networks:
  #     - defensive-net

  # ============================================================================
  # OpenSearch Dashboards (Optional - Uncomment to enable)
  # ============================================================================
  # opensearch-dashboards:
  #   image: opensearchproject/opensearch-dashboards:latest
  #   container_name: defensive-toolkit-dashboards
  #   restart: unless-stopped
  #   environment:
  #     - OPENSEARCH_HOSTS=http://opensearch:9200
  #     - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"  # Enable security in production!
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - defensive-net
  #   depends_on:
  #     - opensearch

# ============================================================================
# Networks
# ============================================================================
networks:
  defensive-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # wazuh-data:
  #   driver: local
  # wazuh-logs:
  #   driver: local
  # wazuh-etc:
  #   driver: local
  # opensearch-data:
  #   driver: local
