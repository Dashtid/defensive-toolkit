#!/usr/bin/env python3
"""
Vulnerability Report Generator
Author: Defensive Toolkit
Date: 2025-10-15

Description:
    Generates comprehensive vulnerability reports in multiple formats:
    - PDF (requires weasyprint)
    - HTML
    - JSON
    - Markdown

Requirements:
    - Python 3.8+
    - weasyprint (optional, for PDF: pip install weasyprint)

Usage:
    python generate-report.py --vulnerabilities scored_vulns.json --output report.html
    python generate-report.py --vulnerabilities scored_vulns.json --format pdf --output report.pdf
"""

import argparse
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List

logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)


class VulnReportGenerator:
    """Generate vulnerability reports"""

    def __init__(self, vulnerabilities: List[Dict], metadata: Dict = None):
        self.vulnerabilities = vulnerabilities
        self.metadata = metadata or {}

    def generate_html(self, output_file: Path) -> None:
        """Generate HTML report"""
        logger.info(f"[+] Generating HTML report...")

        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Vulnerability Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        h1 {{ color: #2c3e50; }}
        .summary {{ background: #f8f9fa; padding: 15px; margin: 20px 0; border-radius: 5px; }}
        .vuln {{ margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; background: #fff; }}
        .critical {{ border-left-color: #e74c3c; }}
        .high {{ border-left-color: #e67e22; }}
        .medium {{ border-left-color: #f39c12; }}
        .low {{ border-left-color: #27ae60; }}
        .badge {{ padding: 3px 8px; border-radius: 3px; color: white; font-size: 12px; }}
        .badge-critical {{ background: #e74c3c; }}
        .badge-high {{ background: #e67e22; }}
        .badge-medium {{ background: #f39c12; }}
        .badge-low {{ background: #27ae60; }}
    </style>
</head>
<body>
    <h1>Vulnerability Assessment Report</h1>
    <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>

    <div class="summary">
        <h2>Summary</h2>
        <p>Total Vulnerabilities: {len(self.vulnerabilities)}</p>
"""

        # Count by priority
        priorities = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
        for vuln in self.vulnerabilities:
            priority = vuln.get('risk_assessment', {}).get('priority', 'low')
            priorities[priority] += 1

        html_content += "<ul>\n"
        for priority, count in priorities.items():
            html_content += f"<li>{priority.upper()}: {count}</li>\n"
        html_content += "</ul>\n</div>\n"

        # Top vulnerabilities
        html_content += "<h2>Vulnerabilities</h2>\n"

        for i, vuln in enumerate(self.vulnerabilities[:50], 1):
            risk = vuln.get('risk_assessment', {})
            priority = risk.get('priority', 'low')
            risk_score = risk.get('risk_score', 0)

            html_content += f'<div class="vuln {priority}">\n'
            html_content += f'<h3>{i}. <span class="badge badge-{priority}">{priority.upper()}</span> '
            html_content += f'Risk Score: {risk_score:.1f}/10</h3>\n'

            # CVE/Name
            cve_id = vuln.get('cve', vuln.get('VulnerabilityID', vuln.get('id', 'Unknown')))
            html_content += f'<p><strong>{cve_id}</strong></p>\n'

            # Description
            desc = vuln.get('description', vuln.get('Description', ''))
            if desc:
                html_content += f'<p>{desc[:300]}...</p>\n'

            # Factors
            factors = risk.get('factors', {})
            html_content += f'<p><small>CVSS: {factors.get("cvss_base", 0):.1f} | '
            html_content += f'Asset: {factors.get("asset_criticality", "medium")} | '
            html_content += f'Environment: {factors.get("environment", "production")}</small></p>\n'

            html_content += '</div>\n'

        html_content += "</body></html>"

        with open(output_file, 'w') as f:
            f.write(html_content)

        logger.info(f"[OK] HTML report generated: {output_file}")

    def generate_markdown(self, output_file: Path) -> None:
        """Generate Markdown report"""
        logger.info(f"[+] Generating Markdown report...")

        md_content = "# Vulnerability Assessment Report\n\n"
        md_content += f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        # Summary
        md_content += "## Summary\n\n"
        md_content += f"**Total Vulnerabilities:** {len(self.vulnerabilities)}\n\n"

        priorities = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
        for vuln in self.vulnerabilities:
            priority = vuln.get('risk_assessment', {}).get('priority', 'low')
            priorities[priority] += 1

        md_content += "**Priority Breakdown:**\n"
        for priority, count in priorities.items():
            md_content += f"- **{priority.upper()}**: {count}\n"

        md_content += "\n## Top Vulnerabilities\n\n"

        for i, vuln in enumerate(self.vulnerabilities[:30], 1):
            risk = vuln.get('risk_assessment', {})
            priority = risk.get('priority', 'low')
            risk_score = risk.get('risk_score', 0)

            md_content += f"### {i}. [{priority.upper()}] Risk Score: {risk_score:.1f}/10\n\n"

            cve_id = vuln.get('cve', vuln.get('VulnerabilityID', 'Unknown'))
            md_content += f"**{cve_id}**\n\n"

            desc = vuln.get('description', vuln.get('Description', ''))[:250]
            if desc:
                md_content += f"{desc}...\n\n"

        with open(output_file, 'w') as f:
            f.write(md_content)

        logger.info(f"[OK] Markdown report generated: {output_file}")


def main():
    parser = argparse.ArgumentParser(description='Vulnerability report generator')
    parser.add_argument('--vulnerabilities', type=Path, required=True, help='Vulnerability JSON file')
    parser.add_argument('--output', type=Path, required=True, help='Output file')
    parser.add_argument('--format', choices=['html', 'markdown', 'json'], default='html',
                        help='Report format')

    args = parser.parse_args()

    with open(args.vulnerabilities, 'r') as f:
        data = json.load(f)

    vulns = data.get('vulnerabilities', data) if isinstance(data, dict) else data

    generator = VulnReportGenerator(vulns, data.get('metadata'))

    if args.format == 'html':
        generator.generate_html(args.output)
    elif args.format == 'markdown':
        generator.generate_markdown(args.output)
    elif args.format == 'json':
        with open(args.output, 'w') as f:
            json.dump(data, f, indent=2)

    return 0


if __name__ == '__main__':
    exit(main())
