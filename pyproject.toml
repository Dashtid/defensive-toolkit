[project]
name = "defensive-toolkit"
version = "1.1.0"
description = "Blue team security tools for detection, monitoring, incident response, and threat hunting"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "David Dashti", email = "david.at.dashti@outlook.com" }
]
keywords = ["security", "blue-team", "detection", "incident-response", "forensics", "compliance"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "yara-python>=4.5.0",
    "sigma-cli>=1.0.0",
    "scapy>=2.5.0",
    "python-dateutil>=2.9.0",
    "pytz>=2024.1",
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "pefile>=2023.2.7",
    "python-magic>=0.4.27",
    "requests>=2.31.0",
    "PyYAML>=6.0.1",
    "click>=8.1.7",
    "colorama>=0.4.6",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
# Optional Windows-specific dependencies
windows = [
    "pywin32>=306",
    "wmi>=1.5.1",
]

# Optional threat intelligence APIs
threat-intel = [
    "shodan>=1.31.0",
    "virustotal-api>=1.1.11",
    "greynoise>=2.1.0",
]

# Optional advanced analysis tools
advanced = [
    "volatility3>=2.5.0",
    "unicorn>=2.0.1",
]

# All optional dependencies
all = [
    "defensive-toolkit[windows,threat-intel,advanced]",
]

[project.urls]
Homepage = "https://github.com/Dashtid/defensive-toolkit"
Repository = "https://github.com/Dashtid/defensive-toolkit"
Issues = "https://github.com/Dashtid/defensive-toolkit/issues"
Documentation = "https://github.com/Dashtid/defensive-toolkit/blob/main/docs/README.md"
Changelog = "https://github.com/Dashtid/defensive-toolkit/blob/main/docs/CHANGELOG.md"

[project.scripts]
# CLI entry points for utility scripts
toolkit-cleanup = "scripts.cleanup:main"
toolkit-validate = "scripts.validate_project:main"
toolkit-gendocs = "scripts.generate_docs:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
# UV-specific configuration
dev-dependencies = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",  # Parallel test execution
    "bandit>=1.8.0",  # Security linting
    "black>=24.10.0",  # Code formatting
    "ruff>=0.8.0",  # Fast linting
    "mypy>=1.13.0",  # Type checking
    "coverage[toml]>=7.6.0",
]

# UV cache configuration for faster builds
cache-keys = [
    { file = "pyproject.toml" },
    { file = "uv.lock" },
]

# Default dependency groups to install
default-groups = ["dev"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",  # Show summary of all test outcomes
    "-v",   # Verbose output
    "--strict-markers",  # Strict marker usage
    "--tb=short",  # Shorter traceback format
    "--cov=.",  # Coverage for all project files
    "--cov-report=html",  # HTML coverage report
    "--cov-report=term-missing",  # Terminal report with missing lines
    "--cov-report=json",  # JSON report for CI/CD
    "--cov-fail-under=70",  # Fail if coverage below 70%
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "windows: marks tests that require Windows platform",
    "linux: marks tests that require Linux platform",
    "requires_network: marks tests that require network access",
    "requires_root: marks tests that require root/admin privileges",
]
filterwarnings = [
    "error",  # Turn warnings into errors
    "ignore::DeprecationWarning",  # Ignore deprecation warnings from dependencies
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/examples/*",
]
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.json]
output = "coverage.json"

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security checks
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # Use of assert (needed for pytest)
    "S603",  # subprocess call (needed for security tools)
    "S607",  # partial executable path (needed for security tools)
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Allow assert in tests
    "S105",  # Allow hardcoded passwords in tests
    "S106",  # Allow hardcoded credentials in tests
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when ready for strict typing
ignore_missing_imports = true
exclude = [
    "venv",
    ".venv",
    "tests",
    "examples",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "examples"]
skips = ["B101", "B601", "B603", "B607"]  # Allow assert, subprocess for security tools
