"""Vulnerability Management API Tests"""

import pytest
from fastapi.testclient import TestClient
from api.main import app
from tests.fixtures.factories import VulnerabilityFactory

client = TestClient(app)


@pytest.fixture
def auth_headers(auth_token):
    return {"Authorization": f"Bearer {auth_token}"}


@pytest.fixture
def auth_token():
    response = client.post("/api/v1/auth/token", data={"username": "admin", "password": "changeme123"})
    return response.json()["access_token"]


class TestVulnerabilityEndpoints:
    """Test vulnerability management endpoints"""

    def test_run_vulnerability_scan(self, auth_headers):
        """Test running vulnerability scan"""
        scan_data = {
            "targets": ["192.168.1.0/24"],
            "scan_type": "full",
            "scanner": "openvas",
            "schedule": "immediate"
        }
        response = client.post("/api/v1/vulnerability/scan", json=scan_data, headers=auth_headers)
        assert response.status_code == 200
        assert "scan_id" in response.json()

    def test_list_vulnerabilities(self, auth_headers):
        """Test listing vulnerabilities"""
        response = client.get("/api/v1/vulnerability/list?severity=high&status=open", headers=auth_headers)
        assert response.status_code == 200
        assert isinstance(response.json(), list)

    def test_generate_sbom(self, auth_headers):
        """Test SBOM generation"""
        sbom_data = {
            "target": "docker-image:latest",
            "target_type": "container",
            "format": "cyclonedx",
            "include_dependencies": True
        }
        response = client.post("/api/v1/vulnerability/sbom", json=sbom_data, headers=auth_headers)
        assert response.status_code == 200

    def test_get_risk_score(self, auth_headers):
        """Test risk score calculation"""
        risk_data = {
            "cve_id": "CVE-2025-1234",
            "asset_criticality": "high",
            "exposure": "internet_facing"
        }
        response = client.post("/api/v1/vulnerability/risk-score", json=risk_data, headers=auth_headers)
        assert response.status_code == 200
        assert "risk_score" in response.json()
