name: Docker Build & Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - 'nginx/**'
      - 'api/**'
      - 'pyproject.toml'
      - '.github/workflows/docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - 'nginx/**'
      - 'api/**'
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Hadolint - Dockerfile Linting
  # ============================================================================
  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Hadolint on API Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: warning
        format: sarif
        output-file: hadolint-api.sarif

    - name: Run Hadolint on Nginx Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: nginx/Dockerfile
        failure-threshold: warning
        format: sarif
        output-file: hadolint-nginx.sarif

    - name: Upload Hadolint SARIF (API)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-api.sarif
        category: hadolint-api

    - name: Upload Hadolint SARIF (Nginx)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-nginx.sarif
        category: hadolint-nginx

  # ============================================================================
  # Build Docker Images
  # ============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: dockerfile-lint
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/api-image.tar

    - name: Upload API image artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-image-${{ matrix.platform }}
        path: /tmp/api-image.tar
        retention-days: 1

    - name: Build Nginx Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        file: ./nginx/Dockerfile
        platforms: ${{ matrix.platform }}
        push: false
        tags: defensive-toolkit-nginx:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/nginx-image.tar

    - name: Upload Nginx image artifact
      uses: actions/upload-artifact@v4
      with:
        name: nginx-image-${{ matrix.platform }}
        path: /tmp/nginx-image.tar
        retention-days: 1

  # ============================================================================
  # Trivy Vulnerability Scanning
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download API image artifact
      uses: actions/download-artifact@v4
      with:
        name: api-image-linux/amd64
        path: /tmp

    - name: Download Nginx image artifact
      uses: actions/download-artifact@v4
      with:
        name: nginx-image-linux/amd64
        path: /tmp

    - name: Load API image
      run: |
        docker load --input /tmp/api-image.tar
        docker image ls -a

    - name: Load Nginx image
      run: |
        docker load --input /tmp/nginx-image.tar
        docker image ls -a

    - name: Run Trivy vulnerability scanner (API)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'defensive-toolkit-api:latest'
        format: 'sarif'
        output: 'trivy-api-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on HIGH/CRITICAL
        vuln-type: 'os,library'
        scanners: 'vuln,secret,misconfig'

    - name: Run Trivy vulnerability scanner (Nginx)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'defensive-toolkit-nginx:latest'
        format: 'sarif'
        output: 'trivy-nginx-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        vuln-type: 'os,library'
        scanners: 'vuln,secret,misconfig'

    - name: Upload Trivy results to GitHub Security (API)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-api-results.sarif'
        category: 'trivy-api'

    - name: Upload Trivy results to GitHub Security (Nginx)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-nginx-results.sarif'
        category: 'trivy-nginx'

    - name: Generate Trivy JSON report (API)
      if: always()
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'defensive-toolkit-api:latest'
        format: 'json'
        output: 'trivy-api-report.json'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy JSON report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-reports
        path: trivy-*.json

  # ============================================================================
  # Docker Bench for Security (CIS Benchmark)
  # ============================================================================
  docker-bench:
    name: Docker Bench Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Docker Bench for Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security | tee docker-bench-results.txt

    - name: Upload Docker Bench results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-bench-results
        path: docker-bench-results.txt

  # ============================================================================
  # Container Health Check Tests
  # ============================================================================
  container-tests:
    name: Container Health & Integration Tests
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create .env file for testing
      run: |
        cat > .env <<EOF
        SECRET_KEY=test-secret-key-for-ci-cd-only
        API_HOST=0.0.0.0
        API_PORT=8000
        CORS_ORIGINS=http://localhost:3000
        RATE_LIMIT_ENABLED=false
        LOG_LEVEL=DEBUG
        GRAFANA_ADMIN_USER=admin
        GRAFANA_ADMIN_PASSWORD=test-password
        EOF

    - name: Generate SSL certificates
      run: |
        mkdir -p nginx/ssl
        openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
          -keyout nginx/ssl/key.pem \
          -out nginx/ssl/cert.pem \
          -subj "/C=US/ST=Test/L=Test/O=Test/CN=localhost"

    - name: Start Docker Compose stack
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to start

    - name: Check container status
      run: |
        docker-compose ps
        docker-compose ps | grep "Up" || exit 1

    - name: Health check - API
      run: |
        curl -f http://localhost:8000/health || exit 1
        echo "[OK] API health check passed"

    - name: Health check - API via Nginx
      run: |
        curl -k -f https://localhost/health || exit 1
        echo "[OK] Nginx reverse proxy health check passed"

    - name: Health check - Prometheus
      run: |
        curl -f http://localhost:9090/-/healthy || exit 1
        echo "[OK] Prometheus health check passed"

    - name: Health check - Grafana
      run: |
        curl -f http://localhost:3000/api/health || exit 1
        echo "[OK] Grafana health check passed"

    - name: Test API metrics endpoint
      run: |
        curl -f http://localhost:8000/metrics | grep "http_requests_total" || exit 1
        echo "[OK] Prometheus metrics endpoint working"

    - name: Test API documentation
      run: |
        curl -f http://localhost:8000/docs || exit 1
        echo "[OK] API documentation accessible"

    - name: Smoke test - API endpoints
      run: |
        # Test root endpoint
        curl -f http://localhost:8000/ | grep "Defensive Toolkit" || exit 1
        echo "[OK] Root endpoint working"

    - name: View container logs (on failure)
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker-compose logs api
        echo "=== Nginx Logs ==="
        docker-compose logs nginx
        echo "=== Prometheus Logs ==="
        docker-compose logs prometheus
        echo "=== Grafana Logs ==="
        docker-compose logs grafana

    - name: Stop Docker Compose stack
      if: always()
      run: docker-compose down -v

  # ============================================================================
  # Test Results Summary
  # ============================================================================
  test-summary:
    name: CI/CD Test Results Summary
    runs-on: ubuntu-latest
    needs: [dockerfile-lint, build, security-scan, docker-bench, container-tests]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "[*] Docker CI/CD Pipeline Results"
        echo "=================================="
        echo "Dockerfile Lint: ${{ needs.dockerfile-lint.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Docker Bench: ${{ needs.docker-bench.result }}"
        echo "Container Tests: ${{ needs.container-tests.result }}"
        echo "=================================="

        if [[ "${{ needs.dockerfile-lint.result }}" == "failure" ]] || \
           [[ "${{ needs.build.result }}" == "failure" ]] || \
           [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
           [[ "${{ needs.container-tests.result }}" == "failure" ]]; then
          echo "[X] Pipeline failed!"
          exit 1
        else
          echo "[OK] All checks passed!"
        fi
